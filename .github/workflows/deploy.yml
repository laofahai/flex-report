name: Deploy LinchKit Apps

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID_STARTER: ${{ secrets.VERCEL_PROJECT_ID_STARTER }}
  VERCEL_PROJECT_ID_WEBSITE: ${{ secrets.VERCEL_PROJECT_ID_WEBSITE }}
  VERCEL_PROJECT_ID_DEMO: ${{ secrets.VERCEL_PROJECT_ID_DEMO }}

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: Install dependencies
        run: bun install
        
      - name: Run lint
        run: bun run validate:light
        
      - name: Run tests
        run: bun test
        
      - name: Build packages
        run: bun run build:packages

  deploy-starter:
    name: Deploy Starter App
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
        
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_PROJECT_ID: ${{ env.VERCEL_PROJECT_ID_STARTER }}
          
      - name: Build Project Artifacts
        run: |
          cp vercel-starter.json vercel.json
          vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_PROJECT_ID: ${{ env.VERCEL_PROJECT_ID_STARTER }}
          
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_PROJECT_ID: ${{ env.VERCEL_PROJECT_ID_STARTER }}

  deploy-website:
    name: Deploy Website App
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
        
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_PROJECT_ID: ${{ env.VERCEL_PROJECT_ID_WEBSITE }}
          
      - name: Build Project Artifacts
        run: |
          cp vercel-website.json vercel.json
          vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_PROJECT_ID: ${{ env.VERCEL_PROJECT_ID_WEBSITE }}
          
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_PROJECT_ID: ${{ env.VERCEL_PROJECT_ID_WEBSITE }}

  deploy-demo:
    name: Deploy Demo App
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
        
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_PROJECT_ID: ${{ env.VERCEL_PROJECT_ID_DEMO }}
          
      - name: Build Project Artifacts
        run: |
          cp vercel-demo-app.json vercel.json
          vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_PROJECT_ID: ${{ env.VERCEL_PROJECT_ID_DEMO }}
          
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_PROJECT_ID: ${{ env.VERCEL_PROJECT_ID_DEMO }}

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [deploy-starter, deploy-website, deploy-demo]
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        app: [starter, website, demo-app]
        include:
          - app: starter
            url: https://linch-kit-starter.vercel.app
            test-dir: e2e/starter
          - app: website
            url: https://linch-kit-website.vercel.app
            test-dir: e2e/website
          - app: demo-app
            url: https://linch-kit-demo-app.vercel.app
            test-dir: e2e/demo-app
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: Install dependencies
        run: bun install
        
      - name: Install Playwright Browsers
        run: bunx playwright install --with-deps
        
      - name: Wait for deployment
        run: |
          echo "Waiting for ${{ matrix.url }} to be ready..."
          for i in {1..30}; do
            if curl -f -s "${{ matrix.url }}" > /dev/null; then
              echo "✅ ${{ matrix.app }} is ready!"
              break
            fi
            echo "⏳ Attempt $i/30: ${{ matrix.app }} not ready yet, waiting..."
            sleep 10
          done
        
      - name: Run E2E Tests for ${{ matrix.app }}
        run: bunx playwright test ${{ matrix.test-dir }}
        env:
          PLAYWRIGHT_BASE_URL: ${{ matrix.url }}
          CI: true
          
      - name: Upload test results for ${{ matrix.app }}
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.app }}
          path: playwright-report/
          retention-days: 30