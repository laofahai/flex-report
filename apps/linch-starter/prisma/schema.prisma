// This file is auto-generated. Do not edit manually.
// Generated from @linch-kit/schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id
  globalEmail String? @unique
  globalPhone String? @unique
  globalUsername String? @unique
  name String?
  avatar String?
  tenants Json?
  currentTenantId String?
  globalStatus String @default("active")
  metadata Json?
  lastLoginAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  deletedAt DateTime? @map("deleted_at")

  @@map("users")
  sessions Session[] @relation("UserRelation")
  accounts Account[] @relation("UserRelation")
  userRoles UserRole[] @relation("UserRelation")
  userDepartments UserDepartment[] @relation("UserRelation")
  directReports UserDepartment[] @relation("ReportTo")
}

model Session {
  id String @id
  sessionToken String @unique
  userId String
  expires DateTime
  userAgent String?
  ipAddress String?
  deviceType String?
  location Json?
  tenantId String?
  status String @default("active")
  lastActiveAt DateTime?
  metadata Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user User? @relation("UserRelation", fields: [userId], references: [id], onDelete: Cascade)
  deletedAt     DateTime? @map("deleted_at")

  @@index([expires], map: "sessions_expires_idx")

  @@index([status], map: "sessions_status_idx")

  @@index([tenantId], map: "sessions_tenantId_idx")

  @@index([lastActiveAt], map: "sessions_lastActiveAt_idx")

  @@map("sessions")
}

model Account {
  id String @id
  userId String
  type String
  provider String
  providerAccountId String
  refresh_token String?
  access_token String?
  expires_at Float?
  token_type String?
  scope String?
  id_token String?
  session_state String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user User? @relation("UserRelation", fields: [userId], references: [id], onDelete: Cascade)
  deletedAt     DateTime? @map("deleted_at")

  @@unique([provider, providerAccountId], map: "accounts_provider_providerAccountId_key")

  @@map("accounts")
}

model Role {
  id String @id
  name String @unique
  displayName String?
  description String?
  permissions Json?
  inherits Json?
  tenantId String?
  type String @default("custom")
  enabled Boolean @default(true)
  priority Int @default(0)
  metadata Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  deletedAt DateTime? @map("deleted_at")

  @@index([tenantId], map: "roles_tenantId_idx")

  @@index([type], map: "roles_type_idx")

  @@index([enabled], map: "roles_enabled_idx")

  @@map("roles")
  userRoles UserRole[]
}

model Permission {
  id String @id
  resource String
  action String
  identifier String @unique
  displayName String?
  description String?
  conditions Json?
  group String?
  tenantId String?
  enabled Boolean @default(true)
  metadata Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  deletedAt     DateTime? @map("deleted_at")

  @@index([resource], map: "permissions_resource_idx")

  @@index([action], map: "permissions_action_idx")

  @@index([resource, action], map: "permissions_resource_action_idx")

  @@index([group], map: "permissions_group_idx")

  @@index([tenantId], map: "permissions_tenantId_idx")

  @@index([enabled], map: "permissions_enabled_idx")

  @@map("permissions")
}

model UserRole {
  id String @id
  userId String
  roleId String
  tenantId String?
  assignedAt DateTime
  assignedBy String?
  expiresAt DateTime?
  enabled Boolean @default(true)
  metadata Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user User? @relation("UserRelation", fields: [userId], references: [id], onDelete: Cascade)
  role Role? @relation(fields: [roleId], references: [id], onDelete: Cascade)
  deletedAt     DateTime? @map("deleted_at")

  @@unique([tenantId], map: "user_roles_tenantId_key")

  @@index([tenantId], map: "user_roles_tenantId_idx")

  @@index([enabled], map: "user_roles_enabled_idx")

  @@index([expiresAt], map: "user_roles_expiresAt_idx")

  @@map("user_roles")
}

model Department {
  id String @id
  name String
  parentId String?
  path String @unique
  level Int @default(0)
  managerId String?
  description String?
  status String @default("active")
  sort Int @default(0)
  metadata Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  deletedAt DateTime? @map("deleted_at")

  @@index([level], map: "departments_level_idx")

  @@index([status], map: "departments_status_idx")

  @@map("departments")
  userDepartments UserDepartment[]
}

model UserDepartment {
  id String @id
  userId String
  departmentId String
  position String?
  isManager Boolean @default(false)
  level Int?
  reportTo String?
  joinedAt DateTime
  leftAt DateTime?
  isPrimary Boolean @default(false)
  metadata Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user User? @relation("UserRelation", fields: [userId], references: [id], onDelete: Cascade)
  department Department? @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  reportToUser User? @relation("ReportTo", fields: [reportTo], references: [id])
  deletedAt     DateTime? @map("deleted_at")

  @@index([isPrimary], map: "user_departments_isPrimary_idx")

  @@index([leftAt], map: "user_departments_leftAt_idx")

  @@map("user_departments")
}

model Tenant {
  id String @id
  name String
  slug String @unique
  domain String? @unique
  description String?
  settings Json?
  status String @default("active")
  plan String?
  metadata Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  deletedAt     DateTime? @map("deleted_at")

  @@index([status], map: "tenants_status_idx")

  @@map("tenants")
}

