// LinchKit Starter App - Prisma Schema
// 此文件定义了数据库模式，支持 PostgreSQL

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户表 - 基础用户信息
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  avatar    String?
  role      UserRole @default(USER)
  status    UserStatus @default(ACTIVE)
  
  // 认证相关
  emailVerified DateTime?
  
  // 审计字段
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? // 软删除
  
  // 关系
  accounts Account[]
  sessions Session[]
  posts    Post[]
  
  @@map("users")
}

// 用户角色枚举
enum UserRole {
  ADMIN
  USER
  GUEST
  
  @@map("user_roles")
}

// 用户状态枚举
enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
  
  @@map("user_status")
}

// 账户表 - OAuth 账户信息
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// 会话表 - 用户会话管理
model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

// 验证令牌表 - 邮箱验证等
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
  @@map("verification_tokens")
}

// 文章表 - 示例业务数据
model Post {
  id          String      @id @default(uuid())
  title       String
  content     String?     @db.Text
  published   Boolean     @default(false)
  status      PostStatus  @default(DRAFT)
  
  // 作者关系
  authorId    String
  author      User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  // 分类关系
  categoryId  String?
  category    Category?   @relation(fields: [categoryId], references: [id])
  
  // 标签关系 (多对多)
  tags        PostTag[]
  
  // 审计字段
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?   // 软删除
  publishedAt DateTime?
  
  @@map("posts")
}

// 文章状态枚举
enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  DELETED
  
  @@map("post_status")
}

// 分类表
model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  slug        String   @unique
  
  // 层级关系
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  
  // 文章关系
  posts       Post[]
  
  // 审计字段
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime? // 软删除
  
  @@map("categories")
}

// 标签表
model Tag {
  id        String    @id @default(uuid())
  name      String    @unique
  color     String?   // 标签颜色
  
  // 文章关系 (多对多)
  posts     PostTag[]
  
  // 审计字段
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // 软删除
  
  @@map("tags")
}

// 文章标签关联表 (多对多中间表)
model PostTag {
  id     String @id @default(uuid())
  postId String
  tagId  String
  
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@unique([postId, tagId])
  @@map("post_tags")
}

// 配置表 - 系统配置管理
model Config {
  id          String      @id @default(uuid())
  key         String      @unique
  value       String      @db.Text
  type        ConfigType  @default(STRING)
  description String?
  
  // 多租户支持
  tenantId    String?     @default("default")
  
  // 审计字段
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@unique([key, tenantId])
  @@map("configs")
}

// 配置类型枚举
enum ConfigType {
  STRING
  NUMBER
  BOOLEAN
  JSON
  
  @@map("config_types")
}

// 审计日志表 - 操作审计
model AuditLog {
  id          String      @id @default(uuid())
  action      String      // 操作类型
  resource    String      // 资源类型
  resourceId  String?     // 资源ID
  userId      String?     // 操作用户
  userEmail   String?     // 用户邮箱
  ipAddress   String?     // IP地址
  userAgent   String?     // 用户代理
  details     String?     @db.Text // JSON格式的详细信息
  
  // 审计分类
  category    AuditCategory @default(SYSTEM)
  severity    AuditSeverity @default(LOW)
  
  // 时间戳
  timestamp   DateTime    @default(now())
  
  @@index([userId])
  @@index([resource, resourceId])
  @@index([timestamp])
  @@map("audit_logs")
}

// 审计分类枚举
enum AuditCategory {
  SECURITY
  DATA
  SYSTEM
  BUSINESS
  
  @@map("audit_categories")
}

// 审计严重程度枚举
enum AuditSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
  
  @@map("audit_severities")
}
