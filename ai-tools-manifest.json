{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "LinchKit AI Tools Manifest",
  "description": "Claude Code 集成工具清单 - 定义 AI 如何与 LinchKit Graph RAG 系统交互",
  "version": "1.0.0",
  "last_updated": "2025-07-06",
  "tools": [
    {
      "name": "ai:query",
      "description": "查询 LinchKit 代码知识图谱，基于 Neo4j Graph RAG 系统。用于在开始编码前理解代码结构、依赖关系和现有实现模式。支持节点查询、关系分析、路径探索和统计信息获取。",
      "category": "graph-query",
      "usage_scenarios": [
        "理解现有代码架构和模式",
        "查找函数、类、接口的定义和用法",
        "分析代码依赖关系和调用链",
        "探索模块间的连接路径",
        "获取项目整体统计信息"
      ],
      "parameters": {
        "type": {
          "type": "string",
          "description": "查询类型",
          "enum": ["node", "relations", "path", "stats"],
          "default": "stats",
          "examples": {
            "node": "查找特定的代码节点（函数、类、文件等）",
            "relations": "分析节点间的关系（依赖、调用等）",
            "path": "探索两个节点间的连接路径",
            "stats": "获取图谱整体统计信息"
          }
        },
        "search": {
          "type": "string",
          "description": "搜索词或节点标识符",
          "required_for": ["node", "relations", "path"],
          "examples": [
            "User",
            "LoginPage",
            "package:@linch-kit/auth",
            "function:createUser"
          ]
        },
        "node-type": {
          "type": "string",
          "description": "节点类型过滤器",
          "enum": ["Function", "Class", "Interface", "Schema", "Component", "Package", "File"],
          "examples": [
            "Function",
            "Schema,Interface",
            "Component"
          ]
        },
        "format": {
          "type": "string",
          "description": "输出格式",
          "enum": ["table", "json", "tree", "ai-context"],
          "default": "table",
          "recommended_for_ai": "ai-context",
          "format_details": {
            "ai-context": "为 AI 优化的上下文数据包格式，包含摘要、结构化数据、元数据和后续建议"
          }
        },
        "limit": {
          "type": "number",
          "description": "结果数量限制",
          "default": 10,
          "range": [1, 100]
        },
        "depth": {
          "type": "number", 
          "description": "关系查询深度",
          "default": 1,
          "range": [1, 5],
          "applicable_to": ["relations"]
        },
        "direction": {
          "type": "string",
          "description": "关系查询方向",
          "enum": ["in", "out", "both"],
          "default": "both",
          "applicable_to": ["relations"]
        }
      },
      "output_format": {
        "ai-context": {
          "summary": "自然语言摘要，描述查询结果的核心信息",
          "data": {
            "description": "结构化的查询结果数据",
            "structure": "根据查询类型变化的数据结构"
          },
          "metadata": {
            "query_type": "执行的查询类型",
            "confidence": "结果置信度 (0-1)",
            "result_count": "结果数量",
            "data_source": "数据来源标识"
          },
          "follow_up_suggestions": {
            "description": "基于当前结果推荐的下一步操作",
            "type": "array of strings"
          }
        }
      },
      "examples": [
        {
          "command": "linch ai:query --type stats --format ai-context",
          "description": "获取图谱整体统计信息（AI 友好格式）",
          "use_case": "了解项目规模和结构概览"
        },
        {
          "command": "linch ai:query --type node --search 'User' --node-type Schema --format ai-context",
          "description": "查找 User 相关的 Schema 定义",
          "use_case": "理解数据模型结构"
        },
        {
          "command": "linch ai:query --type relations --search 'LoginPage' --depth 2 --format ai-context",
          "description": "分析 LoginPage 的依赖关系（深度2）",
          "use_case": "理解组件的依赖网络"
        },
        {
          "command": "linch ai:query --type path --search 'LoginPage AuthService' --format ai-context",
          "description": "查找 LoginPage 到 AuthService 的连接路径",
          "use_case": "理解数据流和调用链"
        }
      ],
      "integration_notes": {
        "claude_code": {
          "recommended_workflow": [
            "1. 使用 --type stats 了解项目概览",
            "2. 使用 --type node 查找相关组件",
            "3. 使用 --type relations 分析依赖关系",
            "4. 基于分析结果制定实现策略"
          ],
          "best_practices": [
            "始终使用 --format ai-context 获得最佳 AI 理解效果",
            "根据 follow_up_suggestions 进行后续查询",
            "结合多个查询类型获得完整上下文"
          ]
        }
      }
    },
    {
      "name": "ai:extract",
      "description": "从代码知识图谱中提取精确的代码片段、文档和元数据。基于图谱节点信息，获取实际的源代码内容和相关文档。",
      "category": "code-extraction",
      "status": "planned",
      "parameters": {
        "node-id": {
          "type": "string",
          "description": "图谱节点 ID",
          "required": true
        },
        "include": {
          "type": "array",
          "description": "包含的内容类型",
          "items": {
            "enum": ["code", "docs", "tests", "types", "examples"]
          },
          "default": ["code"]
        },
        "context": {
          "type": "boolean",
          "description": "是否包含上下文代码",
          "default": false
        }
      }
    },
    {
      "name": "ai:generate",
      "description": "基于项目上下文和现有模式生成代码。使用知识图谱理解项目架构，生成符合现有约定的代码。",
      "category": "code-generation",
      "status": "planned",
      "parameters": {
        "task": {
          "type": "string",
          "description": "代码生成任务描述",
          "required": true
        },
        "context-nodes": {
          "type": "array",
          "description": "相关的上下文节点 ID",
          "items": {
            "type": "string"
          }
        },
        "output-type": {
          "type": "string",
          "description": "输出代码类型",
          "enum": ["component", "function", "schema", "api", "test"]
        }
      }
    }
  ],
  "integration_patterns": {
    "complex_development_workflow": {
      "description": "复杂开发任务的 AI 执行模式（基于 Gemini 建议）",
      "mandatory": true,
      "applicable_scenarios": [
        "复杂功能开发（3+ 个实现步骤）",
        "涉及多个包或模块的集成任务", 
        "需要理解现有架构模式的开发",
        "添加新的 API 端点或数据模型"
      ],
      "phases": [
        {
          "phase": "理解阶段",
          "required": true,
          "actions": [
            "ai:query --type stats --format ai-context (获取项目概览)",
            "ai:query --type node --search <相关实体> --format ai-context (查找相关组件)"
          ],
          "success_criteria": [
            "confidence > 0.8",
            "follow_up_suggestions 不为空",
            "理解项目主要组件和模块结构"
          ]
        },
        {
          "phase": "分析阶段", 
          "required": true,
          "actions": [
            "ai:query --type relations --search <核心组件> --format ai-context (分析依赖)",
            "基于 follow_up_suggestions 进行后续查询"
          ],
          "success_criteria": [
            "理解相关组件的依赖关系",
            "识别现有的代码模式和约定",
            "获得足够的实现上下文"
          ]
        },
        {
          "phase": "实现阶段",
          "required": true,
          "actions": [
            "基于 Graph RAG 上下文生成代码",
            "验证生成代码与现有模式的一致性"
          ],
          "constraints": [
            "代码必须遵循 Graph RAG 分析得出的现有模式",
            "严格遵循 LinchKit 设计原则和约束",
            "使用正确的包导入和依赖关系"
          ]
        }
      ]
    },
    "context_understanding": {
      "description": "AI 上下文理解最佳实践",
      "principles": [
        "始终从 stats 查询开始了解项目规模",
        "使用 relations 查询理解组件间关系",
        "通过 path 查询理解数据流向",
        "利用 follow_up_suggestions 指导下一步操作"
      ]
    }
  },
  "quality_assurance": {
    "validation_commands": [
      "bun validate",
      "bun lint", 
      "bun test"
    ],
    "architecture_constraints": [
      "遵循 LinchKit Schema 驱动架构",
      "保持包依赖层级结构",
      "使用现有的认证和权限模式",
      "确保类型安全"
    ]
  }
}