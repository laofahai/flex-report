{"version":3,"sources":["../src/core/core-types.ts","../src/core/optimized-decorators.ts","../src/test-performance.ts"],"names":["z"],"mappings":"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","file":"test-performance.mjs","sourcesContent":["/**\n * 核心类型定义 - 零依赖的基础类型\n * \n * 这个文件包含最基础的类型定义，避免复杂的类型推导\n * 目标：提升 DTS 构建性能，保持类型安全\n */\n\nimport { z } from 'zod'\n\n/**\n * 数据库字段类型映射（简化版）\n */\nexport type DatabaseFieldType =\n  | 'String'\n  | 'Int'\n  | 'BigInt'\n  | 'Float'\n  | 'Decimal'\n  | 'Boolean'\n  | 'DateTime'\n  | 'Json'\n  | 'Bytes'\n\n/**\n * 数据库关系类型（简化版）\n */\nexport type RelationType = 'one-to-one' | 'one-to-many' | 'many-to-many' | 'many-to-one'\n\n/**\n * 国际化文本类型（简化版）\n */\nexport type I18nText = string\n\n/**\n * 最小化字段配置 - 只包含最核心的数据库相关配置\n */\nexport interface MinimalFieldConfig {\n  /** 是否为主键 */\n  primary?: boolean\n  /** 是否唯一 */\n  unique?: boolean\n  /** 默认值 */\n  default?: unknown\n  /** 数据库字段名 */\n  map?: string\n  /** 是否自动更新时间戳 */\n  updatedAt?: boolean\n  /** 是否自动创建时间戳 */\n  createdAt?: boolean\n  /** 是否为软删除字段 */\n  softDelete?: boolean\n}\n\n/**\n * 基础字段配置 - 包含基本的 UI 配置\n */\nexport interface BasicFieldConfig extends MinimalFieldConfig {\n  /** 字段标签 */\n  label?: string\n  /** 字段描述 */\n  description?: string\n  /** 占位符文本 */\n  placeholder?: string\n  /** 帮助文本 */\n  helpText?: string\n  /** 字段显示顺序 */\n  order?: number\n  /** 是否隐藏字段 */\n  hidden?: boolean\n  /** 字段分组 */\n  group?: string\n}\n\n/**\n * 数据库配置（分离出来避免嵌套复杂度）\n */\nexport interface DatabaseConfig {\n  type?: 'JSON' | 'TEXT' | 'VARCHAR' | 'CHAR' | 'DECIMAL' | 'INT' | 'BIGINT' | 'BOOLEAN' | 'DATE' | 'DATETIME' | 'TIMESTAMP' | string\n  length?: number\n  precision?: number\n  scale?: number\n  /** 是否存储为 JSON（自动推断嵌套对象） */\n  json?: boolean\n}\n\n/**\n * 关系配置（分离出来避免嵌套复杂度）\n */\nexport interface RelationConfig {\n  type: RelationType\n  model: string\n  foreignKey?: string\n  references?: string\n  onDelete?: 'CASCADE' | 'SET_NULL' | 'RESTRICT'\n  onUpdate?: 'CASCADE' | 'SET_NULL' | 'RESTRICT'\n}\n\n/**\n * 验证配置（分离出来避免嵌套复杂度）\n */\nexport interface ValidationConfig {\n  /** 是否必填 */\n  required?: boolean\n  /** 是否只读 */\n  readonly?: boolean\n  /** 错误消息（简化版本） */\n  errorMessages?: Record<string, string>\n}\n\n/**\n * 核心字段配置 - 包含所有核心功能但避免复杂嵌套\n */\nexport interface CoreFieldConfig extends BasicFieldConfig {\n  /** 数据库配置 */\n  db?: DatabaseConfig\n  /** 关系配置 */\n  relation?: RelationConfig\n  /** 验证配置 */\n  validation?: ValidationConfig\n}\n\n/**\n * 字段元数据（简化版）\n */\nexport interface FieldMetadata {\n  /** 字段名 */\n  name?: string\n  /** 字段类型 */\n  type?: string\n  /** 是否为主键 */\n  isPrimary?: boolean\n  /** 是否唯一 */\n  isUnique?: boolean\n  /** 是否可空 */\n  isOptional?: boolean\n  /** 默认值 */\n  defaultValue?: unknown\n}\n\n/**\n * 实体元数据（简化版）\n */\nexport interface EntityMetadata {\n  /** 实体名称 */\n  name: string\n  /** 表名 */\n  tableName?: string\n  /** 字段元数据 */\n  fields?: Record<string, FieldMetadata>\n  /** 索引配置 */\n  indexes?: Array<{\n    fields: string[]\n    unique?: boolean\n    name?: string\n  }>\n}\n\n/**\n * 简化的 Zod Schema 扩展\n * 移除复杂的泛型参数，防止无限类型递归\n */\nexport type CoreSchema = z.ZodObject<any> & {\n  _meta?: EntityMetadata\n}\n\n/**\n * 简化的实体定义接口\n */\nexport interface CoreEntityDefinition {\n  /** 实体名称 */\n  name: string\n  /** Zod Schema */\n  schema: CoreSchema\n  /** 元数据 */\n  meta?: EntityMetadata\n}\n\n/**\n * 字段装饰器类型（简化版）\n */\nexport type FieldDecorator<T extends z.ZodSchema = z.ZodSchema> = (schema: T) => T\n\n/**\n * 实体构建器类型（简化版）\n */\nexport type EntityBuilder = (\n  name: string,\n  fields: Record<string, z.ZodSchema>,\n  config?: {\n    tableName?: string\n    indexes?: Array<{\n      fields: string[]\n      unique?: boolean\n      name?: string\n    }>\n  }\n) => CoreEntityDefinition\n\n/**\n * 类型辅助函数：从 Schema 推断类型（简化版）\n */\nexport type InferSchemaType<T extends z.ZodSchema> = z.infer<T>\n\n/**\n * 类型辅助函数：从字段定义推断实体类型（简化版）\n */\nexport type InferEntityType<T extends Record<string, z.ZodSchema>> = {\n  [K in keyof T]: z.infer<T[K]>\n}\n\n/**\n * 性能优化的字段符号\n */\nexport const FIELD_META_SYMBOL = Symbol('fieldMeta')\n\n/**\n * 性能优化的实体符号\n */\nexport const ENTITY_META_SYMBOL = Symbol('entityMeta')\n\n/**\n * 字段配置验证函数（运行时类型安全）\n */\nexport function validateFieldConfig(config: unknown): config is CoreFieldConfig {\n  if (!config || typeof config !== 'object') return false\n  \n  const cfg = config as Record<string, unknown>\n  \n  // 基本类型检查\n  if (cfg.primary !== undefined && typeof cfg.primary !== 'boolean') return false\n  if (cfg.unique !== undefined && typeof cfg.unique !== 'boolean') return false\n  if (cfg.label !== undefined && typeof cfg.label !== 'string') return false\n  if (cfg.order !== undefined && typeof cfg.order !== 'number') return false\n  if (cfg.hidden !== undefined && typeof cfg.hidden !== 'boolean') return false\n  \n  return true\n}\n\n/**\n * 实体配置验证函数（运行时类型安全）\n */\nexport function validateEntityConfig(config: unknown): config is EntityMetadata {\n  if (!config || typeof config !== 'object') return false\n  \n  const cfg = config as Record<string, unknown>\n  \n  // 基本类型检查\n  if (cfg.name !== undefined && typeof cfg.name !== 'string') return false\n  if (cfg.tableName !== undefined && typeof cfg.tableName !== 'string') return false\n  \n  return true\n}\n\n/**\n * 性能优化的字段元数据获取函数\n */\nexport function getFieldMeta(schema: z.ZodSchema): FieldMetadata | undefined {\n  return (schema as any)[FIELD_META_SYMBOL]\n}\n\n/**\n * 性能优化的字段元数据设置函数\n */\nexport function setFieldMeta<T extends z.ZodSchema>(\n  schema: T,\n  meta: FieldMetadata\n): T {\n  ;(schema as any)[FIELD_META_SYMBOL] = meta\n  return schema\n}\n\n/**\n * 性能优化的实体元数据获取函数\n */\nexport function getEntityMeta(schema: CoreSchema): EntityMetadata | undefined {\n  return (schema as any)[ENTITY_META_SYMBOL]\n}\n\n/**\n * 性能优化的实体元数据设置函数\n */\nexport function setEntityMeta(\n  schema: CoreSchema,\n  meta: EntityMetadata\n): CoreSchema {\n  ;(schema as any)[ENTITY_META_SYMBOL] = meta\n  return schema\n}\n","/**\n * 性能优化的字段和实体装饰器\n * \n * 这个文件提供了简化的 defineField 和 defineEntity 函数\n * 目标：最大化 DTS 构建性能，同时保持功能完整性\n */\n\nimport { z } from 'zod'\nimport {\n  type CoreFieldConfig,\n  type CoreEntityDefinition,\n  type CoreSchema,\n  type EntityMetadata,\n  type FieldMetadata,\n  FIELD_META_SYMBOL,\n  ENTITY_META_SYMBOL,\n  validateFieldConfig,\n  validateEntityConfig,\n} from './core-types'\n\n// 重新导出类型以便外部使用\nexport type {\n  CoreFieldConfig,\n  CoreEntityDefinition,\n  CoreSchema,\n  EntityMetadata,\n  FieldMetadata,\n}\n\n// 重新导出验证函数\nexport {\n  validateFieldConfig,\n  validateEntityConfig,\n}\n\n/**\n * 性能优化的字段定义函数\n * \n * 使用最简单的类型操作，避免复杂的泛型推导\n * \n * @param schema Zod schema\n * @param config 字段配置（可选）\n * @returns 带有元数据的 schema\n */\nexport function defineFieldOptimized<T extends z.ZodSchema>(\n  schema: T,\n  config?: CoreFieldConfig\n): T {\n  // 快速路径：如果没有配置，直接返回\n  if (!config) return schema\n\n  // 运行时验证（替代复杂的类型推导）\n  if (!validateFieldConfig(config)) {\n    console.warn('Invalid field config provided, using default')\n    return schema\n  }\n\n  // 创建最小化的元数据对象\n  const metadata: FieldMetadata = {}\n  \n  // 只设置有值的属性\n  if (config.primary) metadata.isPrimary = true\n  if (config.unique) metadata.isUnique = true\n  if (config.default !== undefined) metadata.defaultValue = config.default\n\n  // 直接设置元数据，避免复杂的类型操作\n  ;(schema as any)[FIELD_META_SYMBOL] = {\n    ...metadata,\n    // 保存完整配置用于后续处理\n    _fullConfig: config\n  }\n\n  return schema\n}\n\n/**\n * 性能优化的实体定义函数\n * \n * 使用最简单的类型操作，避免复杂的泛型推导\n * \n * @param name 实体名称\n * @param fields 字段定义\n * @param config 实体配置（可选）\n * @returns 实体定义\n */\nexport function defineEntityOptimized(\n  name: string,\n  fields: Record<string, z.ZodSchema>,\n  config?: {\n    tableName?: string\n    indexes?: Array<{\n      fields: string[]\n      unique?: boolean\n      name?: string\n    }>\n  }\n): CoreEntityDefinition {\n  // 创建 Zod schema（避免泛型推导）\n  const zodSchema = z.object(fields)\n\n  // 创建实体元数据\n  const metadata: EntityMetadata = {\n    name,\n    tableName: config?.tableName || name.toLowerCase(),\n    indexes: config?.indexes,\n    fields: {}\n  }\n\n  // 收集字段元数据\n  for (const [fieldName, fieldSchema] of Object.entries(fields)) {\n    const fieldMeta = (fieldSchema as any)[FIELD_META_SYMBOL]\n    if (fieldMeta) {\n      metadata.fields![fieldName] = {\n        name: fieldName,\n        type: (fieldSchema._def as any)?.typeName || 'unknown',\n        isPrimary: fieldMeta.isPrimary,\n        isUnique: fieldMeta.isUnique,\n        isOptional: fieldSchema.isOptional(),\n        defaultValue: fieldMeta.defaultValue\n      }\n    }\n  }\n\n  // 创建带元数据的 schema\n  const entitySchema = zodSchema as CoreSchema\n  ;(entitySchema as any)[ENTITY_META_SYMBOL] = metadata\n\n  return {\n    name,\n    schema: entitySchema,\n    meta: metadata\n  }\n}\n\n/**\n * 便捷装饰器 - 主键\n */\nexport function primaryOptimized<T extends z.ZodSchema>(schema: T): T {\n  return defineFieldOptimized(schema, { primary: true })\n}\n\n/**\n * 便捷装饰器 - 唯一约束\n */\nexport function uniqueOptimized<T extends z.ZodSchema>(schema: T): T {\n  return defineFieldOptimized(schema, { unique: true })\n}\n\n/**\n * 便捷装饰器 - 默认值\n */\nexport function defaultValueOptimized<T extends z.ZodSchema>(\n  schema: T,\n  value: unknown\n): T {\n  return defineFieldOptimized(schema, { default: value })\n}\n\n/**\n * 便捷装饰器 - 创建时间\n */\nexport function createdAtOptimized<T extends z.ZodSchema>(schema: T): T {\n  return defineFieldOptimized(schema, { createdAt: true })\n}\n\n/**\n * 便捷装饰器 - 更新时间\n */\nexport function updatedAtOptimized<T extends z.ZodSchema>(schema: T): T {\n  return defineFieldOptimized(schema, { updatedAt: true })\n}\n\n/**\n * 便捷装饰器 - 软删除\n */\nexport function softDeleteOptimized<T extends z.ZodSchema>(schema: T): T {\n  return defineFieldOptimized(schema, { softDelete: true })\n}\n\n/**\n * 便捷装饰器 - 标签\n */\nexport function labelOptimized<T extends z.ZodSchema>(\n  schema: T,\n  label: string\n): T {\n  return defineFieldOptimized(schema, { label })\n}\n\n/**\n * 便捷装饰器 - 描述\n */\nexport function descriptionOptimized<T extends z.ZodSchema>(\n  schema: T,\n  description: string\n): T {\n  return defineFieldOptimized(schema, { description })\n}\n\n/**\n * 便捷装饰器 - 占位符\n */\nexport function placeholderOptimized<T extends z.ZodSchema>(\n  schema: T,\n  placeholder: string\n): T {\n  return defineFieldOptimized(schema, { placeholder })\n}\n\n/**\n * 便捷装饰器 - 字段分组\n */\nexport function groupOptimized<T extends z.ZodSchema>(\n  schema: T,\n  group: string\n): T {\n  return defineFieldOptimized(schema, { group })\n}\n\n/**\n * 便捷装饰器 - 显示顺序\n */\nexport function orderOptimized<T extends z.ZodSchema>(\n  schema: T,\n  order: number\n): T {\n  return defineFieldOptimized(schema, { order })\n}\n\n/**\n * 便捷装饰器 - 隐藏字段\n */\nexport function hiddenOptimized<T extends z.ZodSchema>(schema: T): T {\n  return defineFieldOptimized(schema, { hidden: true })\n}\n\n/**\n * 组合装饰器 - 常用字段组合\n */\nexport function basicFieldOptimized<T extends z.ZodSchema>(\n  schema: T,\n  config: {\n    label?: string\n    description?: string\n    placeholder?: string\n    required?: boolean\n    order?: number\n  }\n): T {\n  return defineFieldOptimized(schema, config)\n}\n\n/**\n * 组合装饰器 - 数据库字段组合\n */\nexport function dbFieldOptimized<T extends z.ZodSchema>(\n  schema: T,\n  config: {\n    primary?: boolean\n    unique?: boolean\n    default?: unknown\n    map?: string\n  }\n): T {\n  return defineFieldOptimized(schema, config)\n}\n\n/**\n * 组合装饰器 - 时间戳字段组合\n */\nexport function timestampFieldsOptimized() {\n  return {\n    createdAt: createdAtOptimized(z.date()),\n    updatedAt: updatedAtOptimized(z.date())\n  }\n}\n\n/**\n * 组合装饰器 - 软删除字段组合\n */\nexport function softDeleteFieldsOptimized() {\n  return {\n    deletedAt: defineFieldOptimized(z.date().optional(), { \n      softDelete: true,\n      hidden: true \n    })\n  }\n}\n\n/**\n * 工具函数 - 获取字段的完整配置\n */\nexport function getFieldConfig(schema: z.ZodSchema): CoreFieldConfig | undefined {\n  const meta = (schema as any)[FIELD_META_SYMBOL]\n  return meta?._fullConfig\n}\n\n/**\n * 工具函数 - 获取实体的完整元数据\n */\nexport function getEntityMetadata(schema: CoreSchema): EntityMetadata | undefined {\n  return (schema as any)[ENTITY_META_SYMBOL]\n}\n\n/**\n * 工具函数 - 检查字段是否为主键\n */\nexport function isPrimaryField(schema: z.ZodSchema): boolean {\n  const meta = (schema as any)[FIELD_META_SYMBOL]\n  return meta?.isPrimary === true\n}\n\n/**\n * 工具函数 - 检查字段是否唯一\n */\nexport function isUniqueField(schema: z.ZodSchema): boolean {\n  const meta = (schema as any)[FIELD_META_SYMBOL]\n  return meta?.isUnique === true\n}\n\n/**\n * 工具函数 - 获取字段默认值\n */\nexport function getFieldDefaultValue(schema: z.ZodSchema): unknown {\n  const meta = (schema as any)[FIELD_META_SYMBOL]\n  return meta?.defaultValue\n}\n","/**\n * Schema 包性能测试文件\n * \n * 测试优化版 API 的 DTS 构建性能\n */\n\nimport { z } from 'zod'\nimport {\n  defineFieldOptimized,\n  defineEntityOptimized,\n  primaryOptimized,\n  uniqueOptimized,\n  createdAtOptimized,\n  updatedAtOptimized,\n  basicFieldOptimized,\n  timestampFieldsOptimized,\n} from './core/optimized-decorators'\n\n/**\n * 简单用户实体 - 使用优化版 API\n */\nexport const SimpleUser = defineEntityOptimized('SimpleUser', {\n  id: primaryOptimized(z.string().uuid()),\n  email: uniqueOptimized(z.string().email()),\n  name: z.string().min(1).max(100),\n  ...timestampFieldsOptimized()\n}, {\n  tableName: 'simple_users'\n})\n\n/**\n * 复杂用户实体 - 使用优化版 API，包含更多字段\n */\nexport const ComplexUser = defineEntityOptimized('ComplexUser', {\n  // 主键\n  id: primaryOptimized(z.string().uuid()),\n  \n  // 基本信息\n  email: basicFieldOptimized(z.string().email(), {\n    label: 'user.email',\n    placeholder: 'Enter your email',\n    order: 1\n  }),\n  \n  username: basicFieldOptimized(z.string().min(3).max(50), {\n    label: 'user.username',\n    placeholder: 'Enter username',\n    order: 2\n  }),\n  \n  name: basicFieldOptimized(z.string().min(1).max(100), {\n    label: 'user.name',\n    placeholder: 'Enter your name',\n    order: 3\n  }),\n  \n  // JSON 字段\n  profile: defineFieldOptimized(z.object({\n    firstName: z.string().optional(),\n    lastName: z.string().optional(),\n    avatar: z.string().url().optional(),\n    bio: z.string().max(500).optional()\n  }).optional(), {\n    label: 'user.profile',\n    order: 4,\n    db: { type: 'JSON' }\n  }),\n  \n  preferences: defineFieldOptimized(z.object({\n    theme: z.enum(['light', 'dark']).default('light'),\n    language: z.string().default('en'),\n    notifications: z.boolean().default(true)\n  }).default({\n    theme: 'light',\n    language: 'en',\n    notifications: true\n  }), {\n    label: 'user.preferences',\n    order: 5,\n    db: { type: 'JSON' }\n  }),\n  \n  // 状态字段\n  status: defineFieldOptimized(z.enum(['active', 'inactive']).default('active'), {\n    label: 'user.status',\n    order: 10\n  }),\n  \n  emailVerified: defineFieldOptimized(z.boolean().default(false), {\n    label: 'user.emailVerified',\n    order: 11\n  }),\n  \n  // 时间戳\n  ...timestampFieldsOptimized()\n}, {\n  tableName: 'complex_users',\n  indexes: [\n    { fields: ['email'], unique: true },\n    { fields: ['username'], unique: true },\n    { fields: ['status'] }\n  ]\n})\n\n/**\n * 多个实体测试 - 验证批量定义的性能\n */\nexport const TestEntities = {\n  User1: defineEntityOptimized('User1', {\n    id: primaryOptimized(z.string()),\n    name: z.string(),\n    ...timestampFieldsOptimized()\n  }),\n  \n  User2: defineEntityOptimized('User2', {\n    id: primaryOptimized(z.string()),\n    email: uniqueOptimized(z.string().email()),\n    ...timestampFieldsOptimized()\n  }),\n  \n  User3: defineEntityOptimized('User3', {\n    id: primaryOptimized(z.string()),\n    data: defineFieldOptimized(z.object({\n      value: z.string()\n    }), {\n      db: { type: 'JSON' }\n    }),\n    ...timestampFieldsOptimized()\n  }),\n  \n  User4: defineEntityOptimized('User4', {\n    id: primaryOptimized(z.string()),\n    items: defineFieldOptimized(z.array(z.string()), {\n      db: { type: 'JSON' }\n    }),\n    ...timestampFieldsOptimized()\n  }),\n  \n  User5: defineEntityOptimized('User5', {\n    id: primaryOptimized(z.string()),\n    config: defineFieldOptimized(z.record(z.string(), z.unknown()), {\n      db: { type: 'JSON' }\n    }),\n    ...timestampFieldsOptimized()\n  })\n}\n\n/**\n * 类型导出\n */\nexport type SimpleUser = z.infer<typeof SimpleUser.schema>\nexport type ComplexUser = z.infer<typeof ComplexUser.schema>\n\n/**\n * Schema 导出\n */\nexport const CreateSimpleUserSchema = SimpleUser.schema.omit({ \n  id: true, \n  createdAt: true, \n  updatedAt: true \n})\n\nexport const CreateComplexUserSchema = ComplexUser.schema.omit({ \n  id: true, \n  createdAt: true, \n  updatedAt: true \n})\n\nexport type CreateSimpleUser = z.infer<typeof CreateSimpleUserSchema>\nexport type CreateComplexUser = z.infer<typeof CreateComplexUserSchema>\n\n/**\n * 默认导出\n */\nexport default {\n  SimpleUser,\n  ComplexUser,\n  TestEntities\n}\n"]}